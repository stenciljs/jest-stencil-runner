/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';

export namespace Components {
  interface FormInput {
    disabled: boolean;
    label: string;
    maxLength: number;
    minLength: number;
    placeholder: string;
    required: boolean;
    showCharCount: boolean;
    type: 'text' | 'email' | 'password' | 'number';
    value: string;
  }
  interface InteractiveButton {
    dataTestId: string;
    disabled: boolean;
    label: string;
    simulateLoading: () => Promise<void>;
    variant: 'primary' | 'secondary' | 'danger';
  }
  interface MyComponent {
    /**
     * The first name
     */
    first: string;
    /**
     * The last name
     */
    last: string;
    /**
     * The middle name
     */
    middle: string;
  }
  interface StatusCard {
    customClass: string;
    dismissible: boolean;
    message: string;
    showIcon: boolean;
    status: 'success' | 'warning' | 'error' | 'info';
    title: string;
  }
}
export interface FormInputCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLFormInputElement;
}
export interface InteractiveButtonCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLInteractiveButtonElement;
}
declare global {
  interface HTMLFormInputElement extends Components.FormInput, HTMLStencilElement {}
  var HTMLFormInputElement: {
    prototype: HTMLFormInputElement;
    new (): HTMLFormInputElement;
  };
  interface HTMLInteractiveButtonElement extends Components.InteractiveButton, HTMLStencilElement {}
  var HTMLInteractiveButtonElement: {
    prototype: HTMLInteractiveButtonElement;
    new (): HTMLInteractiveButtonElement;
  };
  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLStatusCardElement extends Components.StatusCard, HTMLStencilElement {}
  var HTMLStatusCardElement: {
    prototype: HTMLStatusCardElement;
    new (): HTMLStatusCardElement;
  };
  interface HTMLElementTagNameMap {
    'form-input': HTMLFormInputElement;
    'interactive-button': HTMLInteractiveButtonElement;
    'my-component': HTMLMyComponentElement;
    'status-card': HTMLStatusCardElement;
  }
}
declare namespace LocalJSX {
  interface FormInput {
    disabled?: boolean;
    label?: string;
    maxLength?: number;
    minLength?: number;
    onInputBlur?: (event: FormInputCustomEvent<{ value: string; isValid: boolean }>) => void;
    onInputChange?: (event: FormInputCustomEvent<{ value: string; isValid: boolean }>) => void;
    onInputFocus?: (event: FormInputCustomEvent<string>) => void;
    placeholder?: string;
    required?: boolean;
    showCharCount?: boolean;
    type?: 'text' | 'email' | 'password' | 'number';
    value?: string;
  }
  interface InteractiveButton {
    dataTestId?: string;
    disabled?: boolean;
    label?: string;
    onButtonClick?: (event: InteractiveButtonCustomEvent<{ count: number; timestamp: number }>) => void;
    onButtonDoubleClick?: (event: InteractiveButtonCustomEvent<{ message: string }>) => void;
    onLoadingChange?: (event: InteractiveButtonCustomEvent<boolean>) => void;
    variant?: 'primary' | 'secondary' | 'danger';
  }
  interface MyComponent {
    /**
     * The first name
     */
    first?: string;
    /**
     * The last name
     */
    last?: string;
    /**
     * The middle name
     */
    middle?: string;
  }
  interface StatusCard {
    customClass?: string;
    dismissible?: boolean;
    message?: string;
    showIcon?: boolean;
    status?: 'success' | 'warning' | 'error' | 'info';
    title?: string;
  }
  interface IntrinsicElements {
    'form-input': FormInput;
    'interactive-button': InteractiveButton;
    'my-component': MyComponent;
    'status-card': StatusCard;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'form-input': LocalJSX.FormInput & JSXBase.HTMLAttributes<HTMLFormInputElement>;
      'interactive-button': LocalJSX.InteractiveButton & JSXBase.HTMLAttributes<HTMLInteractiveButtonElement>;
      'my-component': LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
      'status-card': LocalJSX.StatusCard & JSXBase.HTMLAttributes<HTMLStatusCardElement>;
    }
  }
}
