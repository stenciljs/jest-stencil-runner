/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
export namespace Components {
  interface FormInput {
    /**
     * Whether input is disabled
     * @default false
     */
    disabled: boolean;
    /**
     * Input label
     */
    label: string;
    /**
     * Maximum length
     */
    maxLength: number;
    /**
     * Minimum length
     */
    minLength: number;
    /**
     * Input placeholder
     */
    placeholder: string;
    /**
     * Whether input is required
     * @default false
     */
    required: boolean;
    /**
     * Whether to show character count
     * @default false
     */
    showCharCount: boolean;
    /**
     * Input type
     * @default 'text'
     */
    type: 'text' | 'email' | 'password' | 'number';
    /**
     * Input value
     * @default ''
     */
    value: string;
  }
  interface InteractiveButton {
    /**
     * Custom data attribute value
     */
    dataTestId: string;
    /**
     * Whether the button is disabled
     * @default false
     */
    disabled: boolean;
    /**
     * The button label
     * @default 'Click me'
     */
    label: string;
    /**
     * The button variant
     * @default 'primary'
     */
    variant: 'primary' | 'secondary' | 'danger';
  }
  interface MyComponent {
    /**
     * The first name
     */
    first: string;
    /**
     * The last name
     */
    last: string;
    /**
     * The middle name
     */
    middle: string;
  }
  interface StatusCard {
    /**
     * Custom CSS classes
     */
    customClass: string;
    /**
     * Whether card is dismissible
     * @default false
     */
    dismissible: boolean;
    /**
     * Card message
     */
    message: string;
    /**
     * Whether to show icon
     * @default true
     */
    showIcon: boolean;
    /**
     * Card status
     * @default 'info'
     */
    status: 'success' | 'warning' | 'error' | 'info';
    /**
     * Card title
     */
    title: string;
  }
}
export interface FormInputCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLFormInputElement;
}
export interface InteractiveButtonCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLInteractiveButtonElement;
}
declare global {
  interface HTMLFormInputElementEventMap {
    inputChange: { value: string; isValid: boolean };
    inputFocus: string;
    inputBlur: { value: string; isValid: boolean };
  }
  interface HTMLFormInputElement extends Components.FormInput, HTMLStencilElement {
    addEventListener<K extends keyof HTMLFormInputElementEventMap>(
      type: K,
      listener: (this: HTMLFormInputElement, ev: FormInputCustomEvent<HTMLFormInputElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLFormInputElementEventMap>(
      type: K,
      listener: (this: HTMLFormInputElement, ev: FormInputCustomEvent<HTMLFormInputElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLFormInputElement: {
    prototype: HTMLFormInputElement;
    new (): HTMLFormInputElement;
  };
  interface HTMLInteractiveButtonElementEventMap {
    buttonClick: { count: number; timestamp: number };
    buttonDoubleClick: { message: string };
    loadingChange: boolean;
  }
  interface HTMLInteractiveButtonElement extends Components.InteractiveButton, HTMLStencilElement {
    addEventListener<K extends keyof HTMLInteractiveButtonElementEventMap>(
      type: K,
      listener: (this: HTMLInteractiveButtonElement, ev: InteractiveButtonCustomEvent<HTMLInteractiveButtonElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLInteractiveButtonElementEventMap>(
      type: K,
      listener: (this: HTMLInteractiveButtonElement, ev: InteractiveButtonCustomEvent<HTMLInteractiveButtonElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLInteractiveButtonElement: {
    prototype: HTMLInteractiveButtonElement;
    new (): HTMLInteractiveButtonElement;
  };
  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLStatusCardElement extends Components.StatusCard, HTMLStencilElement {}
  var HTMLStatusCardElement: {
    prototype: HTMLStatusCardElement;
    new (): HTMLStatusCardElement;
  };
  interface HTMLElementTagNameMap {
    'form-input': HTMLFormInputElement;
    'interactive-button': HTMLInteractiveButtonElement;
    'my-component': HTMLMyComponentElement;
    'status-card': HTMLStatusCardElement;
  }
}
declare namespace LocalJSX {
  interface FormInput {
    /**
     * Whether input is disabled
     * @default false
     */
    disabled?: boolean;
    /**
     * Input label
     */
    label?: string;
    /**
     * Maximum length
     */
    maxLength?: number;
    /**
     * Minimum length
     */
    minLength?: number;
    /**
     * Event emitted when input loses focus
     */
    onInputBlur?: (event: FormInputCustomEvent<{ value: string; isValid: boolean }>) => void;
    /**
     * Event emitted when input value changes
     */
    onInputChange?: (event: FormInputCustomEvent<{ value: string; isValid: boolean }>) => void;
    /**
     * Event emitted when input is focused
     */
    onInputFocus?: (event: FormInputCustomEvent<string>) => void;
    /**
     * Input placeholder
     */
    placeholder?: string;
    /**
     * Whether input is required
     * @default false
     */
    required?: boolean;
    /**
     * Whether to show character count
     * @default false
     */
    showCharCount?: boolean;
    /**
     * Input type
     * @default 'text'
     */
    type?: 'text' | 'email' | 'password' | 'number';
    /**
     * Input value
     * @default ''
     */
    value?: string;
  }
  interface InteractiveButton {
    /**
     * Custom data attribute value
     */
    dataTestId?: string;
    /**
     * Whether the button is disabled
     * @default false
     */
    disabled?: boolean;
    /**
     * The button label
     * @default 'Click me'
     */
    label?: string;
    /**
     * Event emitted when button is clicked
     */
    onButtonClick?: (event: InteractiveButtonCustomEvent<{ count: number; timestamp: number }>) => void;
    /**
     * Event emitted when button is double clicked
     */
    onButtonDoubleClick?: (event: InteractiveButtonCustomEvent<{ message: string }>) => void;
    /**
     * Event emitted when loading state changes
     */
    onLoadingChange?: (event: InteractiveButtonCustomEvent<boolean>) => void;
    /**
     * The button variant
     * @default 'primary'
     */
    variant?: 'primary' | 'secondary' | 'danger';
  }
  interface MyComponent {
    /**
     * The first name
     */
    first?: string;
    /**
     * The last name
     */
    last?: string;
    /**
     * The middle name
     */
    middle?: string;
  }
  interface StatusCard {
    /**
     * Custom CSS classes
     */
    customClass?: string;
    /**
     * Whether card is dismissible
     * @default false
     */
    dismissible?: boolean;
    /**
     * Card message
     */
    message?: string;
    /**
     * Whether to show icon
     * @default true
     */
    showIcon?: boolean;
    /**
     * Card status
     * @default 'info'
     */
    status?: 'success' | 'warning' | 'error' | 'info';
    /**
     * Card title
     */
    title?: string;
  }
  interface IntrinsicElements {
    'form-input': FormInput;
    'interactive-button': InteractiveButton;
    'my-component': MyComponent;
    'status-card': StatusCard;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'form-input': LocalJSX.FormInput & JSXBase.HTMLAttributes<HTMLFormInputElement>;
      'interactive-button': LocalJSX.InteractiveButton & JSXBase.HTMLAttributes<HTMLInteractiveButtonElement>;
      'my-component': LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
      'status-card': LocalJSX.StatusCard & JSXBase.HTMLAttributes<HTMLStatusCardElement>;
    }
  }
}
